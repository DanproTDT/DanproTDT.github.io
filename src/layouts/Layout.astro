---
const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/images/logopage.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
            href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&display=swap"
            rel="stylesheet"
    />
    <title>{title}</title>
</head>
<body>
<header class="w-screen flex justify-center pt-6 px-4">
    <div class="w-[300px] max-w-full">
        <label for="language-selector" class="sr-only">Idioma</label>
        <select
                id="language-selector"
                class="w-full h-12 text-center bg-zinc-800 border border-zinc-600 rounded px-3 py-2"
        >
            <option value="es">Espa√±ol</option>
            <option value="en">English</option>
        </select>

    </div>
</header>



<main class="px-4 sm:px-6 max-w-screen-sm mx-auto">
    <slot />
</main>

<style>
    html,
    body {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Lora', sans-serif;
        background-color: #181818;
        color: #fff;

    }

    select:focus {
        outline: none;
        border-color: #3b82f6;
    }

    @media (max-width: 640px) {
        header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        #language-selector {
            width: 200px;
            margin: 0;
            align-self: flex-start;
            text-align: center;
            text-align-last: center;
        }
        #language-selector option {
            text-align: center;
        }

    }



</style>

</body>
</html>


<script>
    async function translateText(text: string, targetLang: string) {
        if (!text || !targetLang) return text;

        try {
            const res = await fetch("https://us-central1-tranlate-api-469716.cloudfunctions.net/translate", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    text,
                    target_lang: targetLang
                })
            });

            const data = await res.json();
            return data.translated || text;
        } catch (err) {
            console.error("Translation error:", err);
            return text;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        const selector = document.getElementById("language-selector");

        document.querySelectorAll("[data-i18n]").forEach(el => {
            if (el && el.textContent && !el.getAttribute("data-original")) {
                el.setAttribute("data-original", el.textContent.trim());
            }
        });

        async function applyTranslation(lang: string) {
            const elements = document.querySelectorAll("[data-i18n]");
            if (lang === "es") {
                for (const el of elements) {
                    const original = el.getAttribute("data-original");
                    if (original) el.textContent = original;
                }
                document.documentElement.lang = lang;
                localStorage.setItem("lang", lang);
                return;
            }

            for (const el of elements) {
                const original = el.getAttribute("data-original");
                if (!original) continue;

                const translated = await translateText(original, lang);
                el.textContent = translated;
            }

            document.documentElement.lang = lang;
            localStorage.setItem("lang", lang);
        }

        selector?.addEventListener("change", async event => {
            const target = event.target;
            if (target && target instanceof HTMLSelectElement) {
                const lang = target.value;
                await applyTranslation(lang);
            }
        });

        const savedLang = localStorage.getItem("lang");

        if (selector instanceof HTMLSelectElement) {
            if (savedLang) {
                selector.value = savedLang;
                applyTranslation(savedLang);
            } else {
                selector.value = "es";
                applyTranslation("es");
                localStorage.setItem("lang", "es"); // Guardar solo una vez
            }
        }


    });
</script>